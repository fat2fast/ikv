package cmd

import (
	"fmt"
	"log"
	"os"
	"time"

	"fat2fast/ikv/modules/book"
	"fat2fast/ikv/modules/user"
	"fat2fast/ikv/shared"

	"github.com/gin-gonic/gin"

	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "app",
	Short: "Start service",
	Run: func(cmd *cobra.Command, args []string) {
		// Set timezone default
		loc, err := time.LoadLocation(os.Getenv("TIMEZONE"))
		if err != nil {
			panic(err)
		}
		time.Local = loc
		// Setup Logger
		shared.SetupLogger()
		// Start Gin
		r := gin.Default()
		err = r.SetTrustedProxies([]string{"192.168.1.1", "10.1.0.0/24"})
		if err != nil {
			panic(err)
		}
		// // Setup Database
		// db := shared.ConnectDb()
		// // init db to app
		// r.Use(shared.InitDb(db))

		var routes = shared.GetUrl()
		for _, route := range routes {
			r.Handle(route.Method, route.Path, route.HandlerFunc)
		}

		// Kh·ªüi t·∫°o module registry
		registry := shared.NewModuleRegistry()

		// Kh·ªüi t·∫°o v√† ƒëƒÉng k√Ω module Book
		bookModule, err := book.NewModule()
		if err != nil {
			log.Fatalf("Failed to initialize Book module: %v", err)
		}
		registry.RegisterModule(bookModule)
		// Kh·ªüi t·∫°o v√† ƒëƒÉng k√Ω module User
		userModule, err := user.NewModule()
		if err != nil {
			log.Fatalf("Failed to initialize User module: %v", err)
		}
		registry.RegisterModule(userModule)

		// ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c module v·ªõi router
		if err := registry.RegisterAllModules(r); err != nil {
			log.Fatalf("Failed to register modules: %v", err)
		}

		// In ra danh s√°ch c√°c module ƒë√£ ƒëƒÉng k√Ω
		log.Println("Registered modules:")
		for _, module := range registry.GetEnabledModules() {
			log.Printf("- %s", module.GetName())
		}

		// Kh·ªüi ch·∫°y server
		r.Run(":" + os.Getenv("SERVICE_PORT"))
	},
}

// Sub command v√≠ d·ª• 1: Version command
var versionCmd = &cobra.Command{
	Use:   "version",
	Short: "In ra phi√™n b·∫£n c·ªßa ·ª©ng d·ª•ng",
	Long:  "L·ªánh n√†y s·∫Ω in ra th√¥ng tin phi√™n b·∫£n chi ti·∫øt c·ªßa ·ª©ng d·ª•ng IKV",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("IKV Application v1.0.0")
		fmt.Println("Build Date: 2024-01-01")
		fmt.Println("Go Version: go1.21+")
	},
}

// Sub command v√≠ d·ª• 2: Database command v·ªõi flags
var dbCmd = &cobra.Command{
	Use:   "db",
	Short: "Qu·∫£n l√Ω database",
	Long:  "L·ªánh n√†y cung c·∫•p c√°c ch·ª©c nƒÉng ƒë·ªÉ qu·∫£n l√Ω database",
}

var dbStatusCmd = &cobra.Command{
	Use:   "status",
	Short: "Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi database",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("ƒêang ki·ªÉm tra k·∫øt n·ªëi database...")

		// Setup Logger
		shared.SetupLogger()

		// Th·ª≠ k·∫øt n·ªëi database
		db := shared.ConnectDb()
		if db != nil {
			fmt.Println("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
		} else {
			fmt.Println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database!")
		}
	},
}

// Sub command v√≠ d·ª• 3: Module command v·ªõi flags
var moduleCmd = &cobra.Command{
	Use:   "module",
	Short: "Qu·∫£n l√Ω modules",
	Long:  "L·ªánh n√†y cung c·∫•p c√°c ch·ª©c nƒÉng ƒë·ªÉ qu·∫£n l√Ω c√°c modules trong h·ªá th·ªëng",
}

var moduleListCmd = &cobra.Command{
	Use:   "list",
	Short: "Li·ªát k√™ t·∫•t c·∫£ modules",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("üìã Danh s√°ch modules hi·ªán c√≥:")

		// Kh·ªüi t·∫°o module registry
		registry := shared.NewModuleRegistry()

		// Kh·ªüi t·∫°o v√† ƒëƒÉng k√Ω module Book
		bookModule, err := book.NewModule()
		if err != nil {
			log.Fatalf("Failed to initialize Book module: %v", err)
		}
		registry.RegisterModule(bookModule)

		// In ra danh s√°ch modules
		for _, module := range registry.GetEnabledModules() {
			fmt.Printf("  - %s\n", module.GetName())
		}
	},
}

// Kh·ªüi t·∫°o v√† th√™m t·∫•t c·∫£ sub commands
func init() {
	// Th√™m version command
	rootCmd.AddCommand(versionCmd)

	// Th√™m migrate command t·ª´ migrate.go
	rootCmd.AddCommand(migrateCmd)

	// Th√™m db command v√† sub commands
	dbCmd.AddCommand(dbStatusCmd)
	rootCmd.AddCommand(dbCmd)

	// Th√™m module command v√† sub commands
	moduleCmd.AddCommand(moduleListCmd)
	rootCmd.AddCommand(moduleCmd)

	// C√≥ th·ªÉ th√™m flags cho c√°c commands
	// V√≠ d·ª•: th√™m flag --verbose cho version command
	versionCmd.Flags().BoolP("verbose", "v", false, "In th√¥ng tin chi ti·∫øt")
}

func Execute() {
	if err := rootCmd.Execute(); err != nil {
		log.Fatal("failed to execute command", err)
	}
}
